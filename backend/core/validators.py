from django.shortcuts import get_object_or_404
from rest_framework.serializers import ValidationError
from django.conf import settings

from recipes.models import Tag, Ingredient
from obsceneLang.utils import (
    get_words_from_text,
    get_forbidden_words,
    text_has_forbidden_words
)


def validate_tags(value):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–≥–æ–≤."""
    if not value:
        raise ValidationError(
            {'tags': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
        )
    if len(value) != len(set(value)):
        raise ValidationError(
            {'tags': ['–¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.']}
        )
    if len(value) < 1:
        raise ValidationError(
            {'tags': ['–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω.']}
        )
    for tag in value:
        if not Tag.objects.filter(id=tag).exists():
            raise ValidationError(
                {'tags': ['–¢–µ–≥ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç.']}
            )
    return value


def validate_ingredients(ingredients):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""
    if not ingredients:
        raise ValidationError(
            {'ingredients': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
        )
    unique_ingredients = set()
    for item in ingredients:
        id = item.get('id')
        if id in unique_ingredients:
            raise ValidationError("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.")
        unique_ingredients.add(id)
    return ingredients


class ValidateRecipeMixin():
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –º–∏–∫—Å–∏–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞."""

    def validate_image(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏."""
        if not value:
            raise ValidationError(
                {'image': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
            )
        return value

    def validate_text(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞."""
        if not value:
            raise ValidationError(
                {'ingredients': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
            )
        forbidden_words = get_forbidden_words()
        text_words = get_words_from_text(value)
        if text_has_forbidden_words(text_words,
                                    forbidden_words,
                                    settings.THRESHOLD):
            raise ValidationError(
                ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ. "
                 "–ù—É –∏ –Ω—É, –≤—ã —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—Ç–∏—é. "
                 "-10000 —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ ‚òπÔ∏èüìâüëé.")
            )
        return value

    def validate_cooking_time(self, value):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è."""
        if not value:
            raise ValidationError(
                {'cooking_time': ['–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.']}
            )
        if int(value) < 1:
            raise ValidationError(
                {'cooking_time': ['–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è = 1'], }
            )
        return value
